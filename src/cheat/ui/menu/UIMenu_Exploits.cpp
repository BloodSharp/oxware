/*
*	OXWARE developed by oxiKKK
*	Copyright (c) 2023
*
*	This program is licensed under the MIT license. By downloading, copying,
*	installing or using this software you agree to this license.
*
*	License Agreement
*
*	Permission is hereby granted, free of charge, to any person obtaining a
*	copy of this software and associated documentation files (the "Software"),
*	to deal in the Software without restriction, including without limitation
*	the rights to use, copy, modify, merge, publish, distribute, sublicense,
*	and/or sell copies of the Software, and to permit persons to whom the
*	Software is furnished to do so, subject to the following conditions:
*
*	The above copyright notice and this permission notice shall be included
*	in all copies or substantial portions of the Software.
*
*	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
*	OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
*	THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
*	FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
*	IN THE SOFTWARE.
*/

#include "precompiled.h"

void MenuChilden::Exploits::BypassGameConstrains::contents()
{
	CUIMenuWidgets::the().add_checkbox("Re-enable noclip", &bypass_constrain_noclip, "Makes it possible to re-enable noclip in singleplayer. sv_cheats must be enabled.");

	CUIMenuWidgets::the().add_checkbox("Enable", &bypass_constrain_renderdist_enable);
	CUIMenuWidgets::the().add_slider("Render distance", "%0.0f units", &bypass_constrain_renderdist_value);

	CUIMenuWidgets::the().section_unavailable_for_builds(
		0, 3266, "> 3266",
		[]()
		{
			CUIMenuWidgets::the().add_checkbox("Re-enable renderer cvars", &bypass_constrain_renderer_cvars);

			CUIMenuWidgets::the().add_description_text(
				"Disables R_ForceCVars, which is responsible for preventing some renderer cvars to be set.",

				"These cvars are:\n\nr_lightmap, gl_clear, r_novis, r_fullbright, snd_show, chase_active, gl_monolights, gl_wireframe, r_dynamic, gl_alphamin, gl_max_size, gl_polyoffset, r_drawentities.");
		});

	CUIMenuWidgets::the().add_checkbox("Disable SP-Only cvars", &bypass_constrain_sponly_cvars,
									   "Some cvars can be only set in singleplayer. Set this to be able to control these cvars also in MP. "
									   "See the console output for which cvars this affects.");
}

void MenuChilden::Exploits::ServerCommandFilter::contents()
{
	if (g_gui_widgets_i->begin_columns("server_cmd_filter", 3))
	{
		g_gui_widgets_i->setup_column_fixed_width(100);
		g_gui_widgets_i->setup_column_fixed_width(150);

		g_gui_widgets_i->goto_next_column();

		CUIMenuWidgets::the().add_checkbox("Enable", &cmdfilter_enable);
		CUIMenuWidgets::the().add_checkbox("Filter all", &cmdfilter_filter_all);

		g_gui_widgets_i->goto_next_column();

		CUIMenuWidgets::the().add_checkbox("Print blocked cmds", &cmdfilter_print_blocked);

		g_gui_widgets_i->goto_next_column();

		CUIMenuWidgets::the().add_checkbox("Print every cmds", &cmdfilter_print_every);

		g_gui_widgets_i->end_columns();
	}

	CUIMenuWidgets::the().add_description_text_ex(
		"This filter allows you to block commands that are send to you from the server."
		" You can add a list of commands separated by a comma \";\" that you want to block, such as:\n"
		"\"fps_max; bind; exit\" and such.",

		[&]()
		{
			g_gui_widgets_i->add_text(
				"How does it work",
				TEXTPROP_Wrapped,
				g_gui_fontmgr_i->get_font(FID_SegoeUI, FSZ_16px, FDC_Regular));

			g_gui_widgets_i->add_text(
				"For example, often the server sends command to you such as \"fps_max 100; developer 0\" etc."
				" Therefore, you can add the command that you don't want to have executed by the server here."
				" In theory, this is the same as cl_filterstuffcmd however, more customizable.",
				TEXTPROP_Wrapped);
		}
	);

	g_gui_widgets_i->add_table(
		"cmdfilter_table", 2,
		ImGuiTableFlags_HeaderTextOnly,
		[&]()
		{
			static auto column_flags = ImGuiTableColumnFlags_NoSort | ImGuiTableColumnFlags_NoReorder | ImGuiTableColumnFlags_NoResize;
			g_gui_widgets_i->table_setup_column_fixed_width("Commands to be filtered", 350.0f, column_flags);

			g_gui_widgets_i->table_headers_row();
		},
		[&]()
		{
			g_gui_widgets_i->table_next_column();

			static char cmd_buffer[1024];
			static bool at_init = false;
			if (!at_init)
			{
				strcpy_s(cmd_buffer, cmdfilter_filtered_commands.get_value_string());
				at_init = true;
			}

			bool reclaim_focus_key = false;
			if (g_gui_widgets_i->add_text_input_ex("Commands to be filtered", cmd_buffer, sizeof(cmd_buffer),
												   Vector2D(-1.0f, 0.0f)))
			{
				reclaim_focus_key = true;
			};

			// Auto-focus on window apparition
			g_gui_widgets_i->set_item_default_focus();
			if (reclaim_focus_key)
			{
				g_gui_widgets_i->set_keyboard_focus_here(-1); // Auto focus previous widget
			}

			g_gui_widgets_i->table_next_column();

			if (g_gui_widgets_i->add_button("Apply", { -1.0f, 25.0f }, false, BUTTONFLAG_CenterLabel))
			{
				if (cmd_buffer[0])
				{
					cmdfilter_filtered_commands.set_value(cmd_buffer);
				}
			}
		});
}

void MenuChilden::Exploits::FramerateSimulation::contents()
{
	CUIMenuWidgets::the().feature_enabled_section(
	&frame_skip_enable,
	[]()
	{
		CUIMenuWidgets::the().add_slider("Amount", "%0.0f frames", &frame_skip_amount);

		CUIMenuWidgets::the().add_description_text(
			"Frame skip or \"Frame simulation\" enables \"fake\" fps, that are not visual, but physical.",

			"What it does is that it allows execution of the main rendering code only every Nth frame (based on the settings).\n"
			"This allows for massive fps boosts, since basically everything is being rendered each Nth frame only.\n"
			"If you set this up to maximum value, you will get maximum fps boost, but bigger visual lags. On the contrary, you will get less fps boost, but without visual lags.\n\n"
			"Note that above 1000fps the engine isn't really functioning as it should.");

		CUIMenuWidgets::the().add_slider("FPS limit", "~%0.0f frames/sec", &frame_skip_maxfps);
	});
}

void MenuChilden::Exploits::ConsistencyBypass::contents()
{
	CUIMenuWidgets::the().feature_enabled_section(
	&consistencybypass_enable,
	[]()
	{
		CUIMenuWidgets::the().add_checkbox("Logging", &consistencybypass_log);

		CUIMenuWidgets::the().add_description_text(
			"This enables to send false consistency information to the server, when it gets requested.",

			"Consistency in GoldSrc games is a technique that enables servers to check whenever clients have same files"
			" as the server does. The server can also check for malicious DLL files anywhere inside your Half-Life folder (cheat dlls)."
			" Plugins use this to detect cheats when you're connecting to a server and can ban you if they find some.\n\n"
			"This allows you to bypass not only the checks for invalid dlls, but also for other things such as models, sprites, sounds, etc.");
	});
}

void MenuChilden::Exploits::FakeLatency::contents()
{
	CUIMenuWidgets::the().feature_enabled_section(
	&fake_latency,
	[]()
	{
		CUIMenuWidgets::the().add_slider("Amount", "%0.0f ms", &fake_latency_amount);
	});
}

void MenuChilden::Exploits::CvarSandbox::contents()
{
	if (g_gui_widgets_i->begin_columns("cvar_sandbox_columns", 2))
	{
		g_gui_widgets_i->setup_column_fixed_width(200);
		g_gui_widgets_i->goto_next_column();

		CUIMenuWidgets::the().add_checkbox("Enable", &cvar_sandbox_enable);

		g_gui_widgets_i->add_spacing();

		CUIMenuWidgets::the().add_checkbox("Monitor server", &cvar_sandbox_monitor_server,
										   "Enables to see what cvars is the server requesting."
										   " See the console after you join a server, to see what cvars it requests from you.");

		g_gui_widgets_i->goto_next_column();

		g_gui_widgets_i->add_text("Description");

		CUIMenuWidgets::the().add_description_text(
			"\"Cvar sandbox\" is used to \"fake\" the server with cvar values.",

			"Occasionally, some servers request cvar values from the client such as \"fps_max\" etc. and"
			" they basically want to know the value - in order to kick you when the value is \"against their rules\"."
			"\n\nUsing this technique, you can basically send whatever cvar values you want to the server, when it requests it."
			"\n\nFor example, the server wants you to have \"fps_max\" set to \"100\", but you don't want to. Change the value here, "
			"and when the server will request this cvar value, it will send him whatever value you've specified here, instead of the real one."
		);

		g_gui_widgets_i->end_columns();
	}

	// too much code to have inside of the menu...
	CCvarSandbox::the().render_ui();
}
